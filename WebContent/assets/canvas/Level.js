
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


class Level extends Phaser.State {
	
	/**
	 * Level.
	 */
	constructor() {
		
		super();
		
	}
	
	init() {
		
		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
		this.scale.pageAlignHorizontally = true;
		this.scale.pageAlignVertically = true;
		this.game.renderer.renderSession.roundPixels = true;
		
	}
	
	preload () {
		var _text = this.add.text(232.0, 618.0, 'Pechi Poker Ready...', {"font":"bold 60px Arial","fill":"#ffffff"});
		_text.angle = -45.0;
		this.load.pack('cards', 'assets/pack.json');
		this.load.pack('atlas', 'assets/pack.json');
		
		this.load.pack('audio', 'assets/pack.json');
		
	}
	
	create() {
		var _cardsGroup = this.add.group();
		
		var _pokertable_bg = this.add.sprite(-108.0, -24.0, 'pokertable-bg');
		_pokertable_bg.scale.setTo(0.5, 0.52);
		
		var _baseCard = this.add.sprite(585.0, 30.0, 'cards1', 52);
		_baseCard.scale.setTo(0.7, 0.7);
		
		var _cards12 = this.add.sprite(588.0, 30.0, 'cards1', 52);
		_cards12.scale.setTo(0.7, 0.7);
		
		var _cards13 = this.add.sprite(591.0, 30.0, 'cards1', 52);
		_cards13.scale.setTo(0.7, 0.7);
		
		var _cards14 = this.add.sprite(591.0, 30.0, 'cards1', 52);
		_cards14.scale.setTo(0.7, 0.7);
		
		this.add.text(573.0, 114.0, '*Dealer*', {"font":"bold 22px Arial","fill":"#ffffff"});
		
		var _wood = this.add.sprite(1257.0, -51.0, 'wood');
		_wood.scale.setTo(0.1, 1.0);
		
		var _wood1 = this.add.sprite(1302.0, -90.0, 'wood');
		_wood1.angle = 90.0;
		_wood1.scale.setTo(0.1, 1.0);
		
		var _wood2 = this.add.sprite(747.0, -90.0, 'wood');
		_wood2.angle = 90.0;
		_wood2.scale.setTo(0.1, 1.0);
		
		var _wood3 = this.add.sprite(-78.0, -96.0, 'wood');
		_wood3.scale.setTo(0.1, 1.0);
		
		var _wood4 = this.add.sprite(1008.0, 876.0, 'wood');
		_wood4.angle = 90.0;
		_wood4.scale.setTo(0.1, 1.0);
		
		var _wood5 = this.add.sprite(1629.0, 876.0, 'wood');
		_wood5.angle = 90.0;
		_wood5.scale.setTo(0.1, 1.0);
		
		var _group = new GameButtons(this.game);
		_group.position.setTo(375.0, 792.0);
		
		this.add.text(756.0, 114.0, 'Basura', {"font":"bold 22px Arial","fill":"#ffffff"});
		
		
		
		// fields
		
		this.fCardsGroup = _cardsGroup;
		
		    this.fCardsGroup = [];
			    this.assignPosToPlayers(playersArr);
				this.configureFOrPlayers(_cards14,playersArr)
		
		_group.state = this;
		
	}
	
	/* state-methods-begin */
	// -- user code here --	
	 
	
	doBet(pos,players){
		let player = this.findPlayerByPos(pos,players);	
		let num = Math.round(Math.random() * (4 - 1) + 1)
		let chip = this.add.sprite(player.coinGroup.x, player.coinGroup.y, "pokerchip"+ num );
		chip.scale.setTo(0.4, 0.4);
		chip.moveDown();
		this.add.tween(chip).to({
			x : 150 + Math.floor(Math.random() * 150) + 430  ,
			y : 220 + Math.floor(Math.random() * 150) + 120
		}, 300, "Linear", true);
		let chips = this.sound.play("chips",0.1);		
	}
	
	 assignPosToPlayers(players){
		let positions = posMap.get(players.length);
		for (var int = 0; int < positions.length; int++) {
			players[int].pos = positions[int]; 
		}
	 }
	 
	 dealCard(baseCard) {
		if(lastDealCard){
			let newCards = this.add.sprite(baseCard.x ,baseCard.y, 'cards1', 52);
			this.fCardsGroup.push(newCards);
			newCards.Tx = lastDealCard.Tx + 60;
			newCards.Ty = lastDealCard.Ty;
			let posT = this.add.tween(newCards).to( { x:lastDealCard.Tx + 60 , y:lastDealCard.Ty }, 600, Phaser.Easing.Exponential.Out, true);			
			posT.onComplete.add(()=>{
				let scaleT = this.add.tween(newCards.scale).to( { x: 0 }, 100, Phaser.Easing.Exponential.Out, true, 0);	
				 scaleT.onComplete.add(()=>{
					 newCards.frame = 3;	 
					 this.add.tween(newCards.scale).to( { x: 0.7 }, 100, Phaser.Easing.Exponential.Out, true, 0);
				 });	
			});		
			this.sound.play("card-deal");
			newCards.scale.setTo(0.7, 0.7);	
			lastDealCard = newCards;
		}else{
			let newCards = this.add.sprite(baseCard.x ,baseCard.y, 'cards1', 52);
			this.fCardsGroup.push(newCards);
			newCards.Tx = 417.0;
			newCards.Ty = 201.0;
			let posT = this.add.tween(newCards).to( { x:417.0, y:201 }, 600, Phaser.Easing.Exponential.Out, true);			
			posT.onComplete.add(()=>{
				let scaleT = this.add.tween(newCards.scale).to( { x: 0 }, 100, Phaser.Easing.Exponential.Out, true, 0);	
				 scaleT.onComplete.add(()=>{
					 newCards.frame = 30;	 
					 this.add.tween(newCards.scale).to( { x: 0.7 }, 100, Phaser.Easing.Exponential.Out, true, 0);
				 });	
			});	
			this.sound.play("card-deal");
			newCards.scale.setTo(0.7, 0.7);
			lastDealCard = newCards;
		}		
	}
	
	 dealToPlayer(card,x,y,angle,callback) {
		 
		let tween = this.add.tween(card);
		 tween.to({ x: x,y:y }, 300, "Linear", false, 0);
		 tween.frameBased = false;
		 let tween2 = this.add.tween(card).to( { angle: angle }, 500,Phaser.Easing.Exponential.In, false, 0);
		 tween2.frameBased = false;
		 tween.onComplete.add(function() {			
			 callback();
		 },this);
		 return {t1:tween,t2:tween2};
	}
	 
	 configureFOrPlayers(baseCard,players){
		 var lastCard = baseCard
		 let cardsArray = [];
		 let textArray = [];
		 let chipsArray = [];
		 let lastInArray = {x:baseCard.x,y:baseCard.y};
		 let lastInArrayLeft = {x:baseCard.x,y:baseCard.y};
		 for (let i = 0; i < 7; i++) {
			 
			 if(lastInArray.x - 500 > 0 && lastInArray.y - 250 < 0){							
				
				cardsArray.unshift({x:baseCard.x - 300,y:baseCard.y + 100,angle:0,pos:i});
				cardsArray.unshift({x:baseCard.x - 300 - baseCard.width - 10,y:baseCard.y + 100,angle:0,pos:i});
				textArray.unshift({x:baseCard.x - 330,y:baseCard.y + baseCard.height + 5 + 100,angle:0,pos:i});
				chipsArray.unshift({x:baseCard.x - 380,y:baseCard.y + baseCard.height + 5 - 40,angle:0,pos:i});
				
				lastInArray = {x:baseCard.x - 300 - baseCard.width - 10,y:baseCard.y + 100,angle:0,pos:i}
				
				
			 }else if(lastInArray.y - 150 < 0) {				
					
					cardsArray.unshift({x:200 ,y:this.game.height /2 - 60,angle:90,pos:i});
					cardsArray.unshift({x:200 ,y:(this.game.height /2 - 60) + baseCard.width  + 10,angle:90,pos:i});
					textArray.unshift({x:230  ,y:this.game.height /2 - 20,angle:90,pos:i});
					chipsArray.unshift({x:122  ,y:this.game.height /2 - 70,angle:90,pos:i});
					
					lastInArray = {x:150 ,y:(this.game.height /2 - 60) + baseCard.width  + 10,angle:90,pos:i}
					lastInArrayLeft = lastInArray
					
			 }else if(lastInArray.x + 500 + baseCard.width + 10  < this.game.width){
			
					cardsArray.unshift({x:lastInArray.x + 120 , y: lastInArrayLeft.y+150 ,angle:0,pos:i});
					cardsArray.unshift({x:lastInArray.x + 120  + baseCard.width + 10,y:lastInArrayLeft.y+150 ,angle:0,pos:i});1					
					textArray.unshift({x:lastInArray.x + 145 , y:lastInArrayLeft.y + 125,angle:0,pos:i});
					chipsArray.unshift({x:lastInArray.x + 105 , y:lastInArrayLeft.y + 235,angle:0,pos:i});
					
					lastInArray =     {x:lastInArray.x + 200  + baseCard.width + 10,y:lastInArrayLeft.y+150,angle:0,pos:i}
					
					
			 }else if(lastInArray.y - 500 > 0){		
				 
					cardsArray.unshift({x:this.game.width  - 250,y:this.game.height / 2 + 60 ,angle:-90,pos:i});
					cardsArray.unshift({x:this.game.width  - 250, y:this.game.height / 2 + 60 - baseCard.width - 10,angle:-90,pos:i});
					textArray.unshift({x:this.game.width  - 280,y:this.game.height / 2 + 20,angle:-90,pos:i});
					chipsArray.unshift({x:this.game.width  - 170,y:this.game.height / 2 + 80,angle:-90,pos:i});
					
					lastInArray = {x:this.game.width,y:(this.game.height / 2 + 60) - baseCard.width  - 10,angle:-90,pos:i}
					
			 }else{			
					
					cardsArray.unshift({x:baseCard.x + 350,y:baseCard.y + 100,angle:0,pos:i});
					cardsArray.unshift({x:baseCard.x + 350 + baseCard.width + 10,y:baseCard.y + 100,angle:0,pos:i});
					textArray.unshift({x:baseCard.x + 380,y:baseCard.y + baseCard.height + 5 + 100,angle:0,pos:i});
					chipsArray.unshift({x:baseCard.x + 330,y:baseCard.y + baseCard.height + 5 - 40,angle:0,pos:i});
					
					lastInArray = {x:baseCard.x + 350 + baseCard.width + 10,y:baseCard.y + 100,angle:0,pos:i}
					
			 }
		 }		 		
		
		 
		 let posArray = [];
		 let posTextArray = [];				
		 let posArr = posMap.get(players.length);
		 for (let i = 0; i < 14 ; i++) {			 
			 if(posArr.includes(cardsArray[i].pos)){				
				 posArray.push(cardsArray[i]);
			 }				 			 			 			 	
		 }
		 for (var i = 0; i < posArr.length; i++) {
			 posTextArray.push(textArray[posArr[i]]);
		}
		 posTextArray.forEach((elm,i)=>{
			 let player = this.findPlayerByPos(elm.pos,players);
			 let text = this.add.text(elm.x, elm.y, player.name, {"font":"bold 20px Arial","fill":"#ffffff"});			
			 text.angle = elm.angle
		 });
		 
		 chipsArray.forEach((elm,i)=>{
			 let player = this.findPlayerByPos(elm.pos,players);			 			 
			 var _group = new Chips(this.game);
				_group.position.setTo(elm.x,elm.y);
				_group.angle = elm.angle;
				player.coinGroup = _group;
		 })
		 //deals cards to player
		 let accumulated = posArray.map((cardObj)=>{
			 let card = this.add.sprite(baseCard.x ,baseCard.y, 'cards1', 52);		
			 this.fCardsGroup.push(card);
			 card.bringToTop();
			 card.scale.setTo(0.7, 0.7);			 
			 let tweenPair = this.dealToPlayer(card,cardObj.x,cardObj.y,cardObj.angle,()=>{
				 let player = this.findPlayerByPos(cardObj.pos,players);
				if( player.self){
					 let scaleT = this.add.tween(card.scale).to( { x: 0 }, 250, Phaser.Easing.Exponential.Out, true, 0);	
					 scaleT.onComplete.add(()=>{
						 card.frame = 3;	 
						 this.add.tween(card.scale).to( { x: 0.7 }, 250, Phaser.Easing.Exponential.Out, true, 0);
					 });	
				}				 
			 });
			 return tweenPair;
		 }).reduce((acc,curr)=>{
			 if(acc){
				 curr.t1.onComplete.add(()=>{			
					 acc.t1.start(); 
					 this.sound.play("card-deal");
					 acc.t2.start(); 
				 });	 
			 }		
			 return curr;
		 },null);		 
		 
		 accumulated.t1.start(); 
		 accumulated.t2.start(); 
		 // END OF deals cards to player
		 
		 setTimeout(()=>{
			    this.dealCard(baseCard);				
		 },6000);
		 setTimeout(()=>{
			    this.dealCard(baseCard);				
		 },6500);
		 
		 setTimeout(()=>{
			
			 for (var int = 0; int < 5; int++) {
					this.doBet(4,players);
				}	
			 
		 },7500);
		 setTimeout(()=>{
			 for (var int = 0; int < 5; int++) {
				this.doBet(1,players);
			}	
			 
		 },8500);
		 setTimeout(()=>{
			
			 for (var int = 0; int < 5; int++) {
					this.doBet(6,players);
				}	
		 },9500);
		 
		 setTimeout(()=>{
			this.fCardsGroup.forEach((card)=>{
				this.add.tween(card).to({
					x : baseCard.x + 175,
					y : baseCard.y
				}, 400, "Linear", true);
				this.add.tween(card).to({angle:0}, 200, "Linear", true);				
			});
			
			
		 },9500);
		 		 
	 }
	 
	 findPlayerByPos(pos,players){
		 for (var i = 0; i < players.length; i++) {
			if(players[i].pos == pos )
				return players[i];
		}
	 }
	/* state-methods-end */
	
}
/* --- end generated code --- */
// -- user code here --
var posMap = new Map();
posMap.set(3,[1,3,5]);
posMap.set(4,[0,2,4,6]);
posMap.set(5,[0,1,3,5,6]);
posMap.set(6,[0,1,2,4,5,6]);
posMap.set(7,[0,1,2,3,4,5,6]);

var lastDealCard = null;

var playersArr=[
                {name:"Pechi"},
                {name:"Lucho"},
                {name:"Jorge"},
                {name:"Mañe"},
                {name:"Fabi",self:true},
                {name:"Joha"},
                {name:"Yula"},
                ];